<!DOCTYPE html>
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
	<meta name="description" content="">
	<meta name="author" content="">

	<title><%= n %></title>

	<!-- Main Styles -->
	<link rel="stylesheet" href="../../assets/styles/style.min.css">
	
	<!-- Themify Icon -->
	<link rel="stylesheet" href="../../assets/fonts/themify-icons/themify-icons.css">

	<!-- mCustomScrollbar -->
	<link rel="stylesheet" href="../../assets/plugin/mCustomScrollbar/jquery.mCustomScrollbar.min.css">

	<!-- Waves Effect -->
	<link rel="stylesheet" href="../../assets/plugin/waves/waves.min.css">

	<!-- Sweet Alert -->
	<link rel="stylesheet" href="../../assets/plugin/sweet-alert/sweetalert.css">
	
</head>

<body>

<%- include('../includes/sidebar') -%>

<%- include('../includes/navbar') -%>
<!-- /.fixed-navbar -->

<div class="main-content">
	<div class="row small-spacing">
		<div class="col-lg-12 col-md-12">
			<div class="box-content card">
				<h4 class="box-title"><i class="fa fa-pencil ico"></i>Informações do sensor</h4>
				<!-- /.dropdown js__dropdown -->
				<div class="card-content mar">
					<div class="row">
						<div class="col-md-12">											
							<h3>Local do sensor:</h3>
							<p><%= sensor.l%></P>
							<!-- /.row -->
						</div>
						<div class="col-md-12">											
							<h3>Temperatura Máxima/Mínima:</h3>
							<p><%= sensor.tMin%>°C/<%= sensor.tMax%>°C</P>
							<!-- /.row -->
						</div>
						<div class="col-md-12">											
							<h3>Umidade Máxima/Mínima:</h3>
							<p><%= sensor.hMin%>%/<%= sensor.hMax%>%</P>
							<!-- /.row -->
						</div>
						<div class="col-md-12">											
							<h3>Código do sensor:</h3>
							<p><%= sensor.key%></P>
							<!-- /.row -->
						</div>
					</div>
					<!-- /.row -->
				</div>
				<!-- /.card-content -->
			</div>
		</div>
		<div class="col-lg-6 col-md-12">
			<div class="box-content">
				<h4 class="box-title">Temperatura</h4>
				<!-- /.box-title -->

				<canvas id="temp" class="chartjs-chart" width="480" height="320"></canvas>
				<!-- /#line-chartjs-chart.chartjs-chart -->
			</div>
			<!-- /.box-content -->
		</div>
		<!-- /.col-lg-6 col-md-12 -->
		<div class="col-lg-6 col-md-12">
			<div class="box-content">
				<h4 class="box-title">Umidade</h4>
				<!-- /.box-title -->

				<canvas id="Humid" class="chartjs-chart" width="480" height="320"></canvas>
				<!-- /#area-chartjs-chart.chartjs-chart -->
			</div>
			<!-- /.box-content -->
		</div>
		<!-- /.col-lg-6 col-md-12 -->
		<div class="col-xs-12">
			<div class="box-content">
				<h4 class="box-title">Todas as temperaturas relacionadas a esse sensor</h4>
				<!-- /.box-title -->

				<table id="example" class="table table-striped table-bordered display" style="width:100%">
					<thead>
						<tr>
							<th>Local</th>
							<th>Temperatura</th>
							<th>Umidade</th>
							<th>Data</th>
							<th>Hora</th>
						</tr>
					</thead>
					<tfoot>
						<tr>
							<th>Local</th>
							<th>Temperatura</th>
							<th>Umidade</th>
							<th>Data</th>
							<th>Hora</th>
						</tr>
					</tfoot>
					<tbody>
						<% for(s of bigData){%>
							<tr>
								<td><%= s.Local %></td>
								<td><%= s.Temperatura %>°C</td>
								<td><%= s.Umidade %>%</td>
								<td><%= s.DataDMA %></td>
								<td><%= s.Hora %></td>
							</tr>
						<% } %>
					</tbody>
				</table>
			</div>
			<!-- /.box-content -->
		</div>
	</div>
	<!-- /.row small-spacing -->		
	<footer class="footer">
		<ul class="list-inline">
			<li>2019 © DataBytes</li>
			
			<li><a href="#">Terms</a></li>
			<li><a href="#">Help</a></li>
		</ul>
	</footer>
</div>
<!--/#wrapper -->
	<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
	<!--[if lt IE 9]>
		<script src="assets/script/html5shiv.min.js"></script>
		<script src="assets/script/respond.min.js"></script>
	<![endif]-->
	<!-- 
	================================================== -->
	<!-- Placed at the end of the document so the pages load faster -->
	<script src="../../assets/scripts/jquery.min.js"></script>
	<script src="../../assets/scripts/modernizr.min.js"></script>
	<script src="../../assets/plugin/bootstrap/js/bootstrap.min.js"></script>
	<script src="../../assets/plugin/mCustomScrollbar/jquery.mCustomScrollbar.concat.min.js"></script>
	<script src="../../assets/plugin/nprogress/nprogress.js"></script>
	<script src="../../assets/plugin/sweet-alert/sweetalert.min.js"></script>
	<script src="../../assets/plugin/waves/waves.min.js"></script>
	<!-- Sparkline Chart -->
	<script src="../../assets/plugin/chart/sparkline/jquery.sparkline.min.js"></script>
	<script src="../../assets/scripts/chart.sparkline.init.min.js"></script>

	<!-- chart.js Chart -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>

	<!-- Data Tables -->
	<script src="../../assets/plugin/datatables/media/js/jquery.dataTables.min.js"></script>
	<script src="../../assets/plugin/datatables/media/js/dataTables.bootstrap.min.js"></script>
	<script src="../../assets/plugin/datatables/extensions/Responsive/js/dataTables.responsive.min.js"></script>
	<script src="../../assets/plugin/datatables/extensions/Responsive/js/responsive.bootstrap.min.js"></script>
	<script src="../../assets/scripts/datatables.demo.min.js"></script>

	<script src="../../assets/scripts/main.min.js"></script>
	<script>
	var socket = io.connect('http://databytess.herokuapp.com/'); //Se conecta ao servidor

	var temper = document.getElementById('temp').getContext('2d');
	var t1 = new Chart(temper, {
		// O tipo de gráfico que será criado
		type: 'line',
		// As configurações do gráfico
		data: {
		labels: [
			<% for(i=0; i< sensor.topHora.length; i++){%>
				'<%= sensor.topHora[i]%>'
				<% if(i != (sensor.topHora.length -1)){ %>
				,
				<% } %>
			<% } %>
		],
		datasets: [{
			label: "Temperatura",
			borderColor: "rgb(235, 40, 40)",
			data: [<%= sensor.TopT%>],
			fill: true,
			pointStyle: 'circle',
			backgroundColor: 'rgb(235, 40, 40, .3)',
			pointRadius: 5,
			pointHoverRadius: 7,
			lineTension: 0,
		}]
		},
		// Aqui será Configurado o título do gráfico e deixá-lo responsivo
		options: {
			responsive: true,
			hoverMode: 'index',
			stacked: false,
			scales: {
				yAxes: [{
					ticks: {
						beginAtZero: true,
						// Inclui a °C para o gráfico de Temperatura
						callback: function(value) {
							return value + '°C';
						}
					}
				}]
			}
		}
		
	});
	
	var umid = document.getElementById('Humid').getContext('2d');
	var u1 = new Chart(umid, {
		// O tipo de gráfico que será criado
		type: 'line',
		// As configurações do gráfico
		data: {
		labels: [
			<% for(i=0; i< sensor.topHora.length; i++){%>
				'<%= sensor.topHora[i]%>'
				<% if(i != (sensor.topHora.length -1)){ %>
				,
				<% } %>
			<% } %>
		],
		datasets: [{
			label: "Umidade",
			borderColor: "rgb(40, 92, 235)",
			data: [<%= sensor.TopU%>],
			fill: true,
			pointStyle: 'circle',
			backgroundColor: 'rgb(40, 92, 235, .3)',
			pointRadius: 5,
			pointHoverRadius: 7,
			lineTension: 0,
		}]
		},
		// Aqui será Configurado o título do gráfico e deixá-lo responsivo
		options: {
				responsive: true,
				hoverMode: 'index',
				stacked: false,
				scales: {
					yAxes: [{
						ticks: {
							beginAtZero: true,
							// Inclui a porcentagem para o gráfico de umidade
							callback: function(value) {
								return value + '%';
							}
						}
					}]
				}
		}
		
	});

	setInterval(()=>{
		console.log("PAM");
		
		socket.emit('requestLastTH', '<%= sensor.key%>');
	}, 15000);
	
	socket.on('LastTempHumi', (th)=>{
		console.log(th);
		t = th.Temperatura, h = th.Umidade, hora = th.Hora;
		updateChart(u1, h, hora);
		updateChart(t1, t, hora);
		
	})
	//Para evitar a repetição de código
    function updateChart(id, data, time) {
        if(id.data.labels.length <=  15) { //Se houver menos de 15 dados
			id.data.labels.push(time);  //Coloca o horário no eixo X
			console.log(data);
			
            id.data.datasets.forEach((dataset) => {
                dataset.data.push(data); //Adiciona a temperatura no eixo Y
            });
        }
        else {
            id.data.labels.shift(); //Remove o primeiro registro de horário
            id.data.labels.push(time); //Insere a data atual
            id.data.datasets.forEach((dataset) => {
                dataset.data.shift(); //Remove o primeiro registro de tempertura
                dataset.data.push(data); //Insere um novo registro de temperatura
            });
        }
        id.update(); //Atualiza o gráfico
	}
	</script>
</body>
</html>